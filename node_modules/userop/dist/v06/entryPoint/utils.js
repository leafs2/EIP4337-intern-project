"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toRawUserOperation = exports.calculateUserOpHash = void 0;
const viem_1 = require("viem");
const calculateUserOpHash = (userop, entryPoint, chainId) => {
    const packed = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)("address, uint256, bytes32, bytes32, uint256, uint256, uint256, uint256, uint256, bytes32"), [
        userop.sender,
        userop.nonce,
        (0, viem_1.keccak256)(userop.initCode),
        (0, viem_1.keccak256)(userop.callData),
        userop.callGasLimit,
        userop.verificationGasLimit,
        userop.preVerificationGas,
        userop.maxFeePerGas,
        userop.maxPriorityFeePerGas,
        (0, viem_1.keccak256)(userop.paymasterAndData),
    ]);
    const enc = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)("bytes32, address, uint256"), [(0, viem_1.keccak256)(packed), entryPoint, BigInt(chainId)]);
    return (0, viem_1.keccak256)(enc);
};
exports.calculateUserOpHash = calculateUserOpHash;
const toRawUserOperation = (userop) => {
    return {
        sender: userop.sender,
        nonce: (0, viem_1.numberToHex)(userop.nonce),
        initCode: userop.initCode,
        callData: userop.callData,
        callGasLimit: (0, viem_1.numberToHex)(userop.callGasLimit),
        verificationGasLimit: (0, viem_1.numberToHex)(userop.verificationGasLimit),
        preVerificationGas: (0, viem_1.numberToHex)(userop.preVerificationGas),
        maxFeePerGas: (0, viem_1.numberToHex)(userop.maxFeePerGas),
        maxPriorityFeePerGas: (0, viem_1.numberToHex)(userop.maxPriorityFeePerGas),
        paymasterAndData: userop.paymasterAndData,
        signature: userop.signature,
    };
};
exports.toRawUserOperation = toRawUserOperation;
